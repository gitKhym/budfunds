generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  clerkId  String @unique
  username String @unique
  email    String @unique
  password String

  profile Profile?

  friendsAsLeft  Friends[] @relation("friendsAsLeft")
  friendsAsRight Friends[] @relation("friendsAsRight")

  participating Participant[]
  authoring     Author[]
  member        Member[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id     String  @id @default(uuid())
  fname  String?
  lname  String?
  avatar String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Author {
  id         String  @id @default(uuid())
  amountOwed Int
  isSettled  Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  split Split?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Participant {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  splits ParticipantsOnSplits[]

  expenses Expense[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Split {
  id String @id @default(uuid())

  splitName String
  isSettled Boolean @default(false)

  author   Author @relation(fields: [authorId], references: [id])
  authorId String @unique

  participants ParticipantsOnSplits[]

  splitGroup   SplitGroup @relation(fields: [splitGroupId], references: [id])
  splitGroupId String

  expenses Expense[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ParticipantsOnSplits {
  amountToPay Int
  amountPaid  Int         @default(0)
  status      SplitStatus @default(PENDING)
  isSettled   Boolean     @default(false)

  participant   Participant @relation(fields: [participantId], references: [id])
  participantId String

  split   Split  @relation(fields: [splitId], references: [id])
  splitId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([participantId, splitId])
}

model SplitGroup {
  id             String  @id @default(uuid())
  splitGroupName String
  splits         Split[]

  members Member[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Member {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  splitGroup   SplitGroup @relation(fields: [splitGroupId], references: [id])
  splitGroupId String
  role         Role

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  PARTICIPANT
  ADMIN
}

enum SplitStatus {
  PENDING
  PARTIAL
  COMPLETE
  OVERDUE
  CANCELLED
}

model Expense {
  id String @id @default(uuid())

  amountPaid  Int
  description String
  image       String

  participant   Participant @relation(fields: [participantId], references: [id])
  participantId String

  split   Split  @relation(fields: [splitId], references: [id])
  splitId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friends {
  id       String @id @default(uuid())
  left     User   @relation("friendsAsLeft", fields: [leftId], references: [id])
  leftId   String
  leftOwed Int    @default(0)

  right     User   @relation("friendsAsRight", fields: [rightId], references: [id])
  rightId   String
  rightOwed Int    @default(0)

  @@unique([leftId, rightId])
  @@unique([rightId, leftId])
}
